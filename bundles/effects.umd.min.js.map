{"version":3,"sources":["../../../modules/effects/src/effects_metadata.ts","../../../modules/effects/src/on_run_effects.ts","../../../modules/effects/src/effects_resolver.ts","../../../modules/effects/src/effect_notification.ts","../../../modules/effects/src/effects_module.ts","../../../modules/effects/src/util.ts","../../../modules/effects/src/actions.ts","../../../modules/effects/src/tokens.ts","../../../modules/effects/src/error_reporter.ts","../../../modules/effects/src/effect_sources.ts","../../../modules/effects/src/effects_runner.ts","../../../modules/effects/src/effects_root_module.ts","../../../modules/effects/src/effects_feature_module.ts"],"names":["getEffectMetadataEntries","sourceProto","r","hasOwnMetadata","METADATA_KEY","getOwnMetadata","setEffectMetadataEntries","entries","defineMetadata","Effect","_a","dispatch","target","propertyName","effects","metadata","concat","getSourceForInstance","instance","Object","getPrototypeOf","isOnRunEffects","sourceInstance","source","onRunEffectsKey","mergeEffects","sourceName","constructor","name","observables","getSourceMetadata","map","observable","ignoreElements","call","materialized$","materialize","notification","effect","merge","apply","resolveEffectSource","mergedEffects$","ngrxOnRunEffects","verifyOutput","output","reporter","reportErrorThrown","reportInvalidActions","kind","errorReason","getEffectName","report","Source","Error","error","Notification","action","value","isAction","Dispatched","type","createSourceInstances","instances","_i","arguments","length","toPayload","payload","Reflect","compose","Actions","_super","_this","this","__extends","prototype","lift","operator","ofType","allowedTypes","filter","some","Observable","decorators","Injectable","ctorParameters","Inject","args","ScannedActionsSubject","ROOT_EFFECTS","InjectionToken","FEATURE_EFFECTS","CONSOLE","ErrorReporter","console","reason","details","group","key","groupEnd","undefined","EffectSources","errorReporter","addEffects","effectSourceInstance","next","toActions","mergeMap","groupBy","source$","dematerialize","exhaustMap","Subject","EffectsRunner","effectSources","store","effectsSubscription","start","subscribe","ngOnDestroy","unsubscribe","Store","EffectsRootModule","sources","runner","rootEffects","forEach","NgModule","Array","EffectsFeatureModule","root","effectSourceGroups","EffectsModule","forFeature","featureEffects","ngModule","providers","provide","multi","deps","useFactory","forRoot","useValue"],"mappings":"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","file":"./dist/effects/bundles/effects.umd.min.js","sourcesContent":["import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { Observable } from 'rxjs/Observable';\nimport { compose } from '@ngrx/store';\n\nconst /** @type {?} */ METADATA_KEY = '@ngrx/effects';\nconst /** @type {?} */ r: any = Reflect;\n\nexport interface EffectMetadata {\n  propertyName: string;\n  dispatch: boolean;\n}\n/**\n * @param {?} sourceProto\n * @return {?}\n */\nfunction getEffectMetadataEntries(sourceProto: any): EffectMetadata[] {\n  if (r.hasOwnMetadata(METADATA_KEY, sourceProto)) {\n    return r.getOwnMetadata(METADATA_KEY, sourceProto);\n  }\n\n  return [];\n}\n/**\n * @param {?} sourceProto\n * @param {?} entries\n * @return {?}\n */\nfunction setEffectMetadataEntries(sourceProto: any, entries: EffectMetadata[]) {\n  r.defineMetadata(METADATA_KEY, entries, sourceProto);\n}\n/**\n * @param {?=} __0\n * @return {?}\n */\nexport function Effect({ dispatch } = { dispatch: true }): PropertyDecorator {\n  return function(target: any, propertyName: string) {\n    const /** @type {?} */ effects: EffectMetadata[] = getEffectMetadataEntries(target);\n    const /** @type {?} */ metadata: EffectMetadata = { propertyName, dispatch };\n\n    setEffectMetadataEntries(target, [...effects, metadata]);\n  };\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function getSourceForInstance(instance: Object): any {\n  return Object.getPrototypeOf(instance);\n}\n\nexport const /** @type {?} */ getSourceMetadata = compose(\n  getEffectMetadataEntries,\n  getSourceForInstance,\n);\n","import { Observable } from 'rxjs/Observable';\nimport { getSourceForInstance } from './effects_metadata';\nimport { EffectNotification } from './effect_notification';\n\nexport interface OnRunEffects {\n  ngrxOnRunEffects(\n    resolvedEffects$: Observable<EffectNotification>,\n  ): Observable<EffectNotification>;\n}\n\nconst /** @type {?} */ onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function isOnRunEffects(\n  sourceInstance: Object,\n): sourceInstance is OnRunEffects {\n  const /** @type {?} */ source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { materialize } from 'rxjs/operator/materialize';\nimport { map } from 'rxjs/operator/map';\nimport { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification } from './effect_notification';\nimport { getSourceMetadata, getSourceForInstance } from './effects_metadata';\nimport { isOnRunEffects } from './on_run_effects';\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function mergeEffects(\n  sourceInstance: any,\n): Observable<EffectNotification> {\n  const /** @type {?} */ sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const /** @type {?} */ observables: Observable<any>[] = getSourceMetadata(\n    sourceInstance,\n  ).map(({ propertyName, dispatch }): Observable<EffectNotification> => {\n    const /** @type {?} */ observable: Observable<any> = typeof sourceInstance[propertyName] ===\n      'function'\n      ? sourceInstance[propertyName]()\n      : sourceInstance[propertyName];\n\n    if (dispatch === false) {\n      return ignoreElements.call(observable);\n    }\n\n    const /** @type {?} */ materialized$ = materialize.call(observable);\n\n    return map.call(\n      materialized$,\n      (notification: Notification<Action>): EffectNotification => ({\n        effect: sourceInstance[propertyName],\n        notification,\n        propertyName,\n        sourceName,\n        sourceInstance,\n      }),\n    );\n  });\n\n  return merge(...observables);\n}\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function resolveEffectSource(sourceInstance: any) {\n  const /** @type {?} */ mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n","import { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { ErrorReporter } from './error_reporter';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nexport function verifyOutput(output: EffectNotification, reporter: ErrorReporter) {\n  reportErrorThrown(output, reporter);\n  reportInvalidActions(output, reporter);\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportErrorThrown(output: EffectNotification, reporter: ErrorReporter) {\n  if (output.notification.kind === 'E') {\n    const /** @type {?} */ errorReason = `Effect ${getEffectName(output)} threw an error`;\n\n    reporter.report(errorReason, {\n      Source: output.sourceInstance,\n      Effect: output.effect,\n      Error: output.notification.error,\n      Notification: output.notification,\n    });\n  }\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportInvalidActions(output: EffectNotification, reporter: ErrorReporter) {\n  if (output.notification.kind === 'N') {\n    const /** @type {?} */ action = output.notification.value;\n    const /** @type {?} */ isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      const /** @type {?} */ errorReason = `Effect ${getEffectName(output)} dispatched an invalid action`;\n\n      reporter.report(errorReason, {\n        Source: output.sourceInstance,\n        Effect: output.effect,\n        Dispatched: action,\n        Notification: output.notification,\n      });\n    }\n  }\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction isAction(action: any): action is Action {\n  return action && action.type && typeof action.type === 'string';\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction getEffectName({ propertyName, sourceInstance, sourceName }: EffectNotification) {\n  const /** @type {?} */ isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS, CONSOLE } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\nimport { ErrorReporter } from './error_reporter';\nexport class EffectsModule {\n/**\n * @param {?} featureEffects\n * @return {?}\n */\nstatic forFeature(featureEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n/**\n * @param {?} rootEffects\n * @return {?}\n */\nstatic forRoot(rootEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        ErrorReporter,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n        {\n          provide: CONSOLE,\n          useValue: console,\n        },\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction EffectsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsModule.ctorParameters;\n}\n\n/**\n * @param {...?} instances\n * @return {?}\n */\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Action } from '@ngrx/store';\n/**\n * @param {?} action\n * @return {?}\n */\nexport function toPayload(action: Action): any {\n  return ( /** @type {?} */((action as any))).payload;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { filter } from 'rxjs/operator/filter';\nexport class Actions<V = Action> extends Observable<V> {\n/**\n * @param {?=} source\n */\nconstructor( source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n/**\n * @template R\n * @param {?} operator\n * @return {?}\n */\nlift<R>(operator: Operator<V, R>): Observable<R> {\n    const /** @type {?} */ observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n/**\n * @param {...?} allowedTypes\n * @return {?}\n */\nofType(...allowedTypes: string[]): Actions {\n    return filter.call(this, (action: Action) =>\n      allowedTypes.some(type => type === action.type),\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Observable, decorators: [{ type: Inject, args: [ScannedActionsSubject, ] }, ]},\n];\n}\n\nfunction Actions_tsickle_Closure_declarations() {\n/** @type {?} */\nActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const /** @type {?} */ IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects',\n);\nexport const /** @type {?} */ ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects',\n);\nexport const /** @type {?} */ FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects',\n);\nexport const /** @type {?} */ CONSOLE = new InjectionToken<Console>('Browser Console');\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { CONSOLE } from './tokens';\nexport class ErrorReporter {\n/**\n * @param {?} console\n */\nconstructor(\nprivate console: any) {}\n/**\n * @param {?} reason\n * @param {?} details\n * @return {?}\n */\nreport(reason: string, details: any): void {\n    this.console.group(reason);\n\n    for (let /** @type {?} */ key in details) {\n      this.console.error(`${key}:`, details[key]);\n    }\n\n    this.console.groupEnd();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [CONSOLE, ] }, ]},\n];\n}\n\nfunction ErrorReporter_tsickle_Closure_declarations() {\n/** @type {?} */\nErrorReporter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nErrorReporter.ctorParameters;\n/** @type {?} */\nErrorReporter.prototype.console;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { groupBy, GroupedObservable } from 'rxjs/operator/groupBy';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { exhaustMap } from 'rxjs/operator/exhaustMap';\nimport { map } from 'rxjs/operator/map';\nimport { dematerialize } from 'rxjs/operator/dematerialize';\nimport { concat } from 'rxjs/observable/concat';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification, verifyOutput } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\nimport { resolveEffectSource } from './effects_resolver';\nimport { ErrorReporter } from './error_reporter';\nexport class EffectSources extends Subject<any> {\n/**\n * @param {?} errorReporter\n */\nconstructor(\nprivate errorReporter: ErrorReporter,\n  ) {\n    super();\n  }\n/**\n * @param {?} effectSourceInstance\n * @return {?}\n */\naddEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n  }\n/**\n * @return {?}\n */\ntoActions(): Observable<Action> {\n    return mergeMap.call(\n      groupBy.call(this, getSourceForInstance),\n      (source$: GroupedObservable<any, any>) =>\n        dematerialize.call(\n          map.call(\n            exhaustMap.call(source$, resolveEffectSource),\n            (output: EffectNotification) => {\n              verifyOutput(output, this.errorReporter);\n\n              return output.notification;\n            },\n          ),\n        ),\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ErrorReporter, },\n];\n}\n\nfunction EffectSources_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectSources.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectSources.ctorParameters;\n/** @type {?} */\nEffectSources.prototype.errorReporter;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Subscription } from 'rxjs/Subscription';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { EffectSources } from './effect_sources';\nexport class EffectsRunner implements OnDestroy {\nprivate effectsSubscription: Subscription | null = null;\n/**\n * @param {?} effectSources\n * @param {?} store\n */\nconstructor(\nprivate effectSources: EffectSources,\nprivate store: Store<any>,\n  ) {}\n/**\n * @return {?}\n */\nstart() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectSources, },\n{type: Store, },\n];\n}\n\nfunction EffectsRunner_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsRunner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsRunner.ctorParameters;\n/** @type {?} */\nEffectsRunner.prototype.effectsSubscription;\n/** @type {?} */\nEffectsRunner.prototype.effectSources;\n/** @type {?} */\nEffectsRunner.prototype.store;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, Inject } from '@angular/core';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\nexport class EffectsRootModule {\n/**\n * @param {?} sources\n * @param {?} runner\n * @param {?} rootEffects\n */\nconstructor(\nprivate sources: EffectSources,\n    runner: EffectsRunner,\n     rootEffects: any[],\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n  }\n/**\n * @param {?} effectSourceInstance\n * @return {?}\n */\naddEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectSources, },\n{type: EffectsRunner, },\n{type: Array, decorators: [{ type: Inject, args: [ROOT_EFFECTS, ] }, ]},\n];\n}\n\nfunction EffectsRootModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsRootModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsRootModule.ctorParameters;\n/** @type {?} */\nEffectsRootModule.prototype.sources;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, Inject, Type } from '@angular/core';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\nexport class EffectsFeatureModule {\n/**\n * @param {?} root\n * @param {?} effectSourceGroups\n */\nconstructor(\nprivate root: EffectsRootModule,\n     effectSourceGroups: any[][],\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance),\n      ),\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectsRootModule, },\n{type: Array, decorators: [{ type: Inject, args: [FEATURE_EFFECTS, ] }, ]},\n];\n}\n\nfunction EffectsFeatureModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsFeatureModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsFeatureModule.ctorParameters;\n/** @type {?} */\nEffectsFeatureModule.prototype.root;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}