{"version":3,"file":"effects.umd.js","sources":["../../../modules/effects/src/util.ts","../../../modules/effects/src/effects_module.ts","../../../modules/effects/src/effects_feature_module.ts","../../../modules/effects/src/effects_root_module.ts","../../../modules/effects/src/effects_runner.ts","../../../modules/effects/src/effect_sources.ts","../../../modules/effects/src/error_reporter.ts","../../../modules/effects/src/tokens.ts","../../../modules/effects/src/effect_notification.ts","../../../modules/effects/src/actions.ts","../../../modules/effects/src/effects_resolver.ts","../../../modules/effects/src/on_run_effects.ts","../../../modules/effects/src/effects_metadata.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\n\n/**\n * @deprecated Since version 4.1. Will be deleted in version 5.0.\n */\nexport function toPayload(action: Action): any {\n  return (action as any).payload;\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS, CONSOLE } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\nimport { ErrorReporter } from './error_reporter';\n\n@NgModule({})\nexport class EffectsModule {\n  static forFeature(featureEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n\n  static forRoot(rootEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        ErrorReporter,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n        {\n          provide: CONSOLE,\n          useFactory: getConsole,\n        },\n      ],\n    };\n  }\n}\n\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n\nexport function getConsole() {\n  return console;\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\n\n@NgModule({})\nexport class EffectsFeatureModule {\n  constructor(\n    private root: EffectsRootModule,\n    @Inject(FEATURE_EFFECTS) effectSourceGroups: any[][],\n    @Optional() storeModule: StoreModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreModule, Store } from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\n\nexport const ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n\n@NgModule({})\nexport class EffectsRootModule {\n  constructor(\n    private sources: EffectSources,\n    runner: EffectsRunner,\n    store: Store<any>,\n    @Inject(ROOT_EFFECTS) rootEffects: any[],\n    @Optional() storeModule: StoreModule\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n\n    store.dispatch({ type: ROOT_EFFECTS_INIT });\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n}\n","import { Subscription } from 'rxjs/Subscription';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { EffectSources } from './effect_sources';\n\n@Injectable()\nexport class EffectsRunner implements OnDestroy {\n  private effectsSubscription: Subscription | null = null;\n\n  constructor(\n    private effectSources: EffectSources,\n    private store: Store<any>\n  ) {}\n\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n","import { groupBy, GroupedObservable } from 'rxjs/operator/groupBy';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { exhaustMap } from 'rxjs/operator/exhaustMap';\nimport { map } from 'rxjs/operator/map';\nimport { dematerialize } from 'rxjs/operator/dematerialize';\nimport { filter } from 'rxjs/operator/filter';\nimport { concat } from 'rxjs/observable/concat';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Notification } from 'rxjs/Notification';\nimport { Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification, verifyOutput } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\nimport { resolveEffectSource } from './effects_resolver';\nimport { ErrorReporter } from './error_reporter';\n\n@Injectable()\nexport class EffectSources extends Subject<any> {\n  constructor(private errorReporter: ErrorReporter) {\n    super();\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n  }\n\n  /**\n   * @internal\n   */\n  toActions(): Observable<Action> {\n    return mergeMap.call(\n      groupBy.call(this, getSourceForInstance),\n      (source$: GroupedObservable<any, any>) =>\n        dematerialize.call(\n          filter.call(\n            map.call(\n              exhaustMap.call(source$, resolveEffectSource),\n              (output: EffectNotification) => {\n                verifyOutput(output, this.errorReporter);\n\n                return output.notification;\n              }\n            ),\n            (notification: Notification<any>) => notification.kind === 'N'\n          )\n        )\n    );\n  }\n}\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { CONSOLE } from './tokens';\n\n@Injectable()\nexport class ErrorReporter {\n  constructor(@Inject(CONSOLE) private console: any) {}\n\n  report(reason: string, details: any): void {\n    this.console.group(reason);\n\n    for (let key in details) {\n      this.console.error(`${key}:`, details[key]);\n    }\n\n    this.console.groupEnd();\n  }\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\nexport const CONSOLE = new InjectionToken<Console>('Browser Console');\n","import { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { ErrorReporter } from './error_reporter';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n\nexport function verifyOutput(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  reportErrorThrown(output, reporter);\n  reportInvalidActions(output, reporter);\n}\n\nfunction reportErrorThrown(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  if (output.notification.kind === 'E') {\n    const errorReason = `Effect ${getEffectName(output)} threw an error`;\n\n    reporter.report(errorReason, {\n      Source: output.sourceInstance,\n      Effect: output.effect,\n      Error: output.notification.error,\n      Notification: output.notification,\n    });\n  }\n}\n\nfunction reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorReporter\n) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      const errorReason = `Effect ${getEffectName(\n        output\n      )} dispatched an invalid action`;\n\n      reporter.report(errorReason, {\n        Source: output.sourceInstance,\n        Effect: output.effect,\n        Dispatched: action,\n        Notification: output.notification,\n      });\n    }\n  }\n}\n\nfunction isAction(action: any): action is Action {\n  return action && action.type && typeof action.type === 'string';\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { filter } from 'rxjs/operator/filter';\n\n@Injectable()\nexport class Actions<V = Action> extends Observable<V> {\n  constructor(@Inject(ScannedActionsSubject) source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n\n  lift<R>(operator: Operator<V, R>): Observable<R> {\n    const observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  ofType<V2 extends V = V>(...allowedTypes: string[]): Actions<V2> {\n    return filter.call(this, (action: Action) =>\n      allowedTypes.some(type => type === action.type)\n    );\n  }\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { materialize } from 'rxjs/operator/materialize';\nimport { map } from 'rxjs/operator/map';\nimport { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification } from './effect_notification';\nimport { getSourceMetadata, getSourceForInstance } from './effects_metadata';\nimport { isOnRunEffects } from './on_run_effects';\n\nexport function mergeEffects(\n  sourceInstance: any\n): Observable<EffectNotification> {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const observables: Observable<any>[] = getSourceMetadata(\n    sourceInstance\n  ).map(({ propertyName, dispatch }): Observable<EffectNotification> => {\n    const observable: Observable<any> =\n      typeof sourceInstance[propertyName] === 'function'\n        ? sourceInstance[propertyName]()\n        : sourceInstance[propertyName];\n\n    if (dispatch === false) {\n      return ignoreElements.call(observable);\n    }\n\n    const materialized$ = materialize.call(observable);\n\n    return map.call(\n      materialized$,\n      (notification: Notification<Action>): EffectNotification => ({\n        effect: sourceInstance[propertyName],\n        notification,\n        propertyName,\n        sourceName,\n        sourceInstance,\n      })\n    );\n  });\n\n  return merge(...observables);\n}\n\nexport function resolveEffectSource(sourceInstance: any) {\n  const mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n","import { Observable } from 'rxjs/Observable';\nimport { getSourceForInstance } from './effects_metadata';\nimport { EffectNotification } from './effect_notification';\n\nexport interface OnRunEffects {\n  ngrxOnRunEffects(\n    resolvedEffects$: Observable<EffectNotification>\n  ): Observable<EffectNotification>;\n}\n\nconst onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n\nexport function isOnRunEffects(\n  sourceInstance: Object\n): sourceInstance is OnRunEffects {\n  const source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { Observable } from 'rxjs/Observable';\nimport { compose } from '@ngrx/store';\n\nconst METADATA_KEY = '__@ngrx/effects__';\nconst r: any = Reflect;\n\nexport interface EffectMetadata {\n  propertyName: string;\n  dispatch: boolean;\n}\n\nfunction getEffectMetadataEntries(sourceProto: any): EffectMetadata[] {\n  return sourceProto.constructor[METADATA_KEY] || [];\n}\n\nfunction setEffectMetadataEntries(sourceProto: any, entries: EffectMetadata[]) {\n  const constructor = sourceProto.constructor;\n  const meta: EffectMetadata[] = constructor.hasOwnProperty(METADATA_KEY)\n    ? (constructor as any)[METADATA_KEY]\n    : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[\n        METADATA_KEY\n      ];\n  Array.prototype.push.apply(meta, entries);\n}\n\nexport function Effect({ dispatch } = { dispatch: true }): PropertyDecorator {\n  return function(target: any, propertyName: string) {\n    const metadata: EffectMetadata = { propertyName, dispatch };\n    setEffectMetadataEntries(target, [metadata]);\n  };\n}\n\nexport function getSourceForInstance(instance: Object): any {\n  return Object.getPrototypeOf(instance);\n}\n\nexport const getSourceMetadata = compose(\n  getEffectMetadataEntries,\n  getSourceForInstance\n);\n\nexport type EffectsMetadata<T> = {\n  [key in keyof T]?:\n    | undefined\n    | {\n        dispatch: boolean;\n      }\n};\n\nexport function getEffectsMetadata<T>(instance: T): EffectsMetadata<T> {\n  const metadata: EffectsMetadata<T> = {};\n\n  getSourceMetadata(instance).forEach(({ propertyName, dispatch }) => {\n    metadata[propertyName] = { dispatch };\n  });\n\n  return metadata;\n}\n"],"names":["NgModule","StoreModule","Optional","Inject","Store","store","Injectable","Subject","mergeMap","groupBy","dematerialize","filter","map","exhaustMap","InjectionToken","Observable","ScannedActionsSubject","merge","materialize","ignoreElements","compose"],"mappings":"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"}