{"version":3,"file":"effects.js","sources":["../../../modules/effects/index.ts","../../../modules/effects/src/util.ts","../../../modules/effects/src/effects_module.ts","../../../modules/effects/src/run_effects.ts","../../../modules/effects/src/effects_runner.ts","../../../modules/effects/src/effects_feature_module.ts","../../../modules/effects/src/effect_sources.ts","../../../modules/effects/src/error_reporter.ts","../../../modules/effects/src/tokens.ts","../../../modules/effects/src/actions.ts","../../../modules/effects/src/effects_resolver.ts","../../../modules/effects/src/on_run_effects.ts","../../../modules/effects/src/effects_metadata.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Effect,mergeEffects,Actions,EffectsModule,EffectSources,OnRunEffects,toPayload} from './public_api';\n\nexport {EffectsFeatureModule as ɵb} from './src/effects_feature_module';\nexport {createSourceInstances as ɵa} from './src/effects_module';\nexport {EffectsRunner as ɵg} from './src/effects_runner';\nexport {ErrorReporter as ɵf} from './src/error_reporter';\nexport {RUN_EFFECTS as ɵi,createRunEffects as ɵh} from './src/run_effects';\nexport {CONSOLE as ɵe,FEATURE_EFFECTS as ɵd,ROOT_EFFECTS as ɵc} from './src/tokens';","import { Action } from '@ngrx/store';\n/**\n * @param {?} action\n * @return {?}\n */\nexport function toPayload(action: Action): any {\n  return ( /** @type {?} */((action as any))).payload;\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS, CONSOLE } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRunner } from './effects_runner';\nimport { ErrorReporter } from './error_reporter';\nimport { RUN_EFFECTS } from './run_effects';\nexport class EffectsModule {\n/**\n * @param {?} featureEffects\n * @return {?}\n */\nstatic forFeature(featureEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n/**\n * @param {?} rootEffects\n * @return {?}\n */\nstatic forRoot(rootEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        ErrorReporter,\n        Actions,\n        RUN_EFFECTS,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n        {\n          provide: CONSOLE,\n          useValue: console,\n        },\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction EffectsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsModule.ctorParameters;\n}\n\n/**\n * @param {...?} instances\n * @return {?}\n */\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  APP_INITIALIZER,\n  Provider,\n  Optional,\n  Type,\n  Injector,\n} from '@angular/core';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { BOOTSTRAP_EFFECTS, ROOT_EFFECTS } from './tokens';\n/**\n * @param {?} effectSources\n * @param {?} runner\n * @param {?} rootEffects\n * @return {?}\n */\nexport function createRunEffects(\n  effectSources: EffectSources,\n  runner: EffectsRunner,\n  rootEffects: any[],\n) {\n  return function() {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      effectSources.addEffects(effectSourceInstance),\n    );\n  };\n}\n\nexport const /** @type {?} */ RUN_EFFECTS: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  deps: [EffectSources, EffectsRunner, ROOT_EFFECTS],\n  useFactory: createRunEffects,\n};\n","import { Subscription } from 'rxjs/Subscription';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { EffectSources } from './effect_sources';\nexport class EffectsRunner implements OnDestroy {\nprivate effectsSubscription: Subscription | null = null;\n/**\n * @param {?} effectSources\n * @param {?} store\n */\nconstructor(\nprivate effectSources: EffectSources,\nprivate store: Store<any>,\n  ) {}\n/**\n * @return {?}\n */\nstart() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectSources, },\n{type: Store, },\n];\n}\n\nfunction EffectsRunner_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsRunner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsRunner.ctorParameters;\n/** @type {?} */\nEffectsRunner.prototype.effectsSubscription;\n/** @type {?} */\nEffectsRunner.prototype.effectSources;\n/** @type {?} */\nEffectsRunner.prototype.store;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, Inject, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { FEATURE_EFFECTS } from './tokens';\nexport class EffectsFeatureModule {\n/**\n * @param {?} effectSources\n * @param {?} effectSourceGroups\n */\nconstructor(\nprivate effectSources: EffectSources,\n     effectSourceGroups: any[][],\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        effectSources.addEffects(effectSourceInstance),\n      ),\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EffectSources, },\n{type: Array, decorators: [{ type: Inject, args: [FEATURE_EFFECTS, ] }, ]},\n];\n}\n\nfunction EffectsFeatureModule_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectsFeatureModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectsFeatureModule.ctorParameters;\n/** @type {?} */\nEffectsFeatureModule.prototype.effectSources;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { groupBy, GroupedObservable } from 'rxjs/operator/groupBy';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { exhaustMap } from 'rxjs/operator/exhaustMap';\nimport { map } from 'rxjs/operator/map';\nimport { dematerialize } from 'rxjs/operator/dematerialize';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { getSourceForInstance } from './effects_metadata';\nimport { resolveEffectSource, EffectNotification } from './effects_resolver';\nimport { ErrorReporter } from './error_reporter';\nexport class EffectSources extends Subject<any> {\n/**\n * @param {?} errorReporter\n */\nconstructor(private errorReporter: ErrorReporter) {\n    super();\n  }\n/**\n * @param {?} effectSourceInstance\n * @return {?}\n */\naddEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n  }\n/**\n * @return {?}\n */\ntoActions(): Observable<Action> {\n    return mergeMap.call(\n      groupBy.call(this, getSourceForInstance),\n      (source$: GroupedObservable<any, any>) =>\n        dematerialize.call(\n          map.call(\n            exhaustMap.call(source$, resolveEffectSource),\n            (output: EffectNotification) => {\n              switch (output.notification.kind) {\n                case 'N': {\n                  const /** @type {?} */ action = output.notification.value;\n                  const /** @type {?} */ isInvalidAction =\n                    !action || !action.type || typeof action.type !== 'string';\n\n                  if (isInvalidAction) {\n                    const /** @type {?} */ errorReason = `Effect \"${output.sourceName}.${output.propertyName}\" dispatched an invalid action`;\n\n                    this.errorReporter.report(errorReason, {\n                      Source: output.sourceInstance,\n                      Effect: output.effect,\n                      Dispatched: action,\n                      Notification: output.notification,\n                    });\n                  }\n\n                  break;\n                }\n                case 'E': {\n                  const /** @type {?} */ errorReason = `Effect \"${output.sourceName}.${output.propertyName}\" threw an error`;\n\n                  this.errorReporter.report(errorReason, {\n                    Source: output.sourceInstance,\n                    Effect: output.effect,\n                    Error: output.notification.error,\n                    Notification: output.notification,\n                  });\n\n                  break;\n                }\n              }\n\n              return output.notification;\n            },\n          ),\n        ),\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ErrorReporter, },\n];\n}\n\nfunction EffectSources_tsickle_Closure_declarations() {\n/** @type {?} */\nEffectSources.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEffectSources.ctorParameters;\n/** @type {?} */\nEffectSources.prototype.errorReporter;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { CONSOLE } from './tokens';\nexport class ErrorReporter {\n/**\n * @param {?} console\n */\nconstructor(\nprivate console: any) {}\n/**\n * @param {?} reason\n * @param {?} details\n * @return {?}\n */\nreport(reason: string, details: any): void {\n    this.console.group(reason);\n\n    for (let /** @type {?} */ key in details) {\n      this.console.error(`${key}:`, details[key]);\n    }\n\n    this.console.groupEnd();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [CONSOLE, ] }, ]},\n];\n}\n\nfunction ErrorReporter_tsickle_Closure_declarations() {\n/** @type {?} */\nErrorReporter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nErrorReporter.ctorParameters;\n/** @type {?} */\nErrorReporter.prototype.console;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const /** @type {?} */ IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects',\n);\nexport const /** @type {?} */ BOOTSTRAP_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Bootstrap Effects',\n);\nexport const /** @type {?} */ ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects',\n);\nexport const /** @type {?} */ FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects',\n);\nexport const /** @type {?} */ CONSOLE = new InjectionToken<Console>('Browser Console');\n","import { Injectable, Inject } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { filter } from 'rxjs/operator/filter';\nexport class Actions<V = Action> extends Observable<V> {\n/**\n * @param {?=} source\n */\nconstructor( source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n/**\n * @template R\n * @param {?} operator\n * @return {?}\n */\nlift<R>(operator: Operator<V, R>): Observable<R> {\n    const /** @type {?} */ observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n/**\n * @param {...?} allowedTypes\n * @return {?}\n */\nofType(...allowedTypes: string[]): Actions {\n    return filter.call(this, (action: Action) =>\n      allowedTypes.some(type => type === action.type),\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Observable, decorators: [{ type: Inject, args: [ScannedActionsSubject, ] }, ]},\n];\n}\n\nfunction Actions_tsickle_Closure_declarations() {\n/** @type {?} */\nActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { materialize } from 'rxjs/operator/materialize';\nimport { map } from 'rxjs/operator/map';\nimport { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { getSourceMetadata, getSourceForInstance } from './effects_metadata';\nimport { isOnRunEffects } from './on_run_effects';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function mergeEffects(\n  sourceInstance: any,\n): Observable<EffectNotification> {\n  const /** @type {?} */ sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const /** @type {?} */ observables: Observable<any>[] = getSourceMetadata(\n    sourceInstance,\n  ).map(({ propertyName, dispatch }): Observable<EffectNotification> => {\n    const /** @type {?} */ observable: Observable<any> = typeof sourceInstance[propertyName] ===\n      'function'\n      ? sourceInstance[propertyName]()\n      : sourceInstance[propertyName];\n\n    if (dispatch === false) {\n      return ignoreElements.call(observable);\n    }\n\n    const /** @type {?} */ materialized$ = materialize.call(observable);\n\n    return map.call(\n      materialized$,\n      (notification: Notification<Action>): EffectNotification => ({\n        effect: sourceInstance[propertyName],\n        notification,\n        propertyName,\n        sourceName,\n        sourceInstance,\n      }),\n    );\n  });\n\n  return merge(...observables);\n}\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function resolveEffectSource(sourceInstance: any) {\n  const /** @type {?} */ mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n","import { Observable } from 'rxjs/Observable';\nimport { getSourceForInstance } from './effects_metadata';\nimport { EffectNotification } from './effects_resolver';\n\nexport interface OnRunEffects {\n  ngrxOnRunEffects(\n    resolvedEffects$: Observable<EffectNotification>,\n  ): Observable<EffectNotification>;\n}\n\nconst /** @type {?} */ onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nexport function isOnRunEffects(\n  sourceInstance: Object,\n): sourceInstance is OnRunEffects {\n  const /** @type {?} */ source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { Observable } from 'rxjs/Observable';\nimport { compose } from '@ngrx/store';\n\nconst /** @type {?} */ METADATA_KEY = '@ngrx/effects';\nconst /** @type {?} */ r: any = Reflect;\n\nexport interface EffectMetadata {\n  propertyName: string;\n  dispatch: boolean;\n}\n/**\n * @param {?} sourceProto\n * @return {?}\n */\nfunction getEffectMetadataEntries(sourceProto: any): EffectMetadata[] {\n  if (r.hasOwnMetadata(METADATA_KEY, sourceProto)) {\n    return r.getOwnMetadata(METADATA_KEY, sourceProto);\n  }\n\n  return [];\n}\n/**\n * @param {?} sourceProto\n * @param {?} entries\n * @return {?}\n */\nfunction setEffectMetadataEntries(sourceProto: any, entries: EffectMetadata[]) {\n  r.defineMetadata(METADATA_KEY, entries, sourceProto);\n}\n/**\n * @param {?=} __0\n * @return {?}\n */\nexport function Effect({ dispatch } = { dispatch: true }): PropertyDecorator {\n  return function(target: any, propertyName: string) {\n    const /** @type {?} */ effects: EffectMetadata[] = getEffectMetadataEntries(target);\n    const /** @type {?} */ metadata: EffectMetadata = { propertyName, dispatch };\n\n    setEffectMetadataEntries(target, [...effects, metadata]);\n  };\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function getSourceForInstance(instance: Object): any {\n  return Object.getPrototypeOf(instance);\n}\n\nexport const /** @type {?} */ getSourceMetadata = compose(\n  getEffectMetadataEntries,\n  getSourceForInstance,\n);\n"],"names":[],"mappings":"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"}